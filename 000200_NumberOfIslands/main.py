from typing import List


class Solution:
    def _print(self, grid):
        print("-" * 10)
        for row in grid:
            def _(s):
                if s == "0":
                    return ".."
                elif s == "1":
                    return "##"
                else:
                    return f"{s:02d}"
            print([_(x) for x in row])


    def numIslands(self, grid: List[List[str]]) -> int:
        r = 1

        from queue import Queue
        q = Queue()

        h = len(grid)
        w = len(grid[0])
        y = 0
        x = 0
        while y < h:

            x = 0
            while x < w:
                if isinstance(grid[y][x], str) and grid[y][x] == "1":
                    q.put_nowait((y, x))
                    while not q.empty():
                        y_, x_ = q.get_nowait()
                        if grid[y_][x_] != "1":
                            continue
                        grid[y_][x_] = r

                        if x_ > 0 and grid[y_][x_ - 1] == "1":
                            q.put_nowait((y_, x_ - 1))
                        if x_ < w - 1 and grid[y_][x_ + 1] == "1":                        
                            q.put_nowait((y_, x_ + 1))
                        if y_ > 0 and grid[y_ - 1][x_] == "1":                        
                            q.put_nowait((y_ - 1, x_))
                        if y_ < h - 1 and grid[y_ + 1][x_] == "1":                         
                            q.put_nowait((y_ + 1, x_))
                    r += 1
                    
                    # self._print(grid)
                x += 1

            y += 1
        return r - 1



if __name__ == "__main__":
    sln = Solution()
    # print(sln.numIslands([
    #     ["1","1","1","1","0"],
    #     ["1","1","0","1","0"],
    #     ["1","1","0","0","0"],
    #     ["0","0","0","0","0"]
    # ]))
    # print(sln.numIslands([
    #     ["1","1","0","0","0"],
    #     ["1","1","0","0","0"],
    #     ["0","0","1","0","0"],
    #     ["0","0","0","1","1"]
    # ]))
    # print(sln.numIslands([
    #     ["1","1","1"],
    #     ["0","1","0"],
    #     ["1","1","1"]
    # ]))
    # print(sln.numIslands([
    #     ["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],
    #     ["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],
    #     ["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],
    #     ["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],
    #     ["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
    #     ["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],
    #     ["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],
    #     ["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],
    #     ["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],
    #     ["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],
    #     ["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],
    #     ["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],
    #     ["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],
    #     ["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],
    #     ["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],
    #     ["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],
    #     ["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],
    #     ["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],
    #     ["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],
    #     ["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]
    # ]))
    print(sln.numIslands([
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
        ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
    ]))